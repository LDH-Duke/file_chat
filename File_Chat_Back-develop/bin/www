#!/usr/bin/env node

/**
 * Module dependencies.
 */
const app = require('../src/app');
const debug = require('debug')('sample:server');
const http = require('http');
const SocketIO = require('socket.io');
const fs = require('fs');
const moment = require('moment');
const models = require('../src/models');
const FtpService = require('../src/api/ftp/ftp.service');
const { Container } = require('typedi');
const SftpClient = require('ssh2-sftp-client');
const { join } = require('path');
const { randomUUID } = require('crypto');
const { Client } = require('basic-ftp');
const { Sequelize, DataType } = require('sequelize');
const multer = require('multer');
const path = require('path');
const { Expo } = require("expo-server-sdk");
const config = require('../env/database.config');
const AWS = require('aws-sdk');
// const zlib = require('zlib');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3333');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);
const io = SocketIO(server, {
  cors: {
    origin: '*',
    methods: ['GET', 'POST', 'PUT', 'DELETE'],
  },
  maxHttpBufferSize: 1e8, // 100 MB
  // pingTimeout:30000, // 핑메세지 못받을 경우 연결이 끊기도록 하는 설정
  // pingInterval: 25000 // 설정된 시간마다 신호를 보내서 연결상태를 유지 or 확인 하는 설정
});

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);
/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string' ? 'Pipe ' + port : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string' ? 'pipe ' + addr : 'port ' + addr.port;
  debug('Listening on ' + bind);
}

/* ===== Socket.io ===== */

/* 채널 기반 소켓 */
const room = ['Home']; //모든방 배열 초기값 선언

//방 권한 객체배열
let myRoom = [
  // { user_id: 'Home', room_id: 'Home2' },
  {
    room_id: 'ra01',
    room_name: '과제1단톡',
    user_id: 'Derek',
    room_description: 'Yes i can do it for you',
    status: 'available',
    unreadCnt: 0,
  },
  {
    room_id: 'ra02',
    room_name: '데렉연구회',
    user_id: 'Derek',
    room_description: 'Yes i can do it for you',
    status: 'dnd',
    unreadCnt: 0,
  },
  {
    room_id: 'ra03',
    room_name: '동아리방',
    user_id: 'Derek',
    room_description: 'Yes i can do it for you',
    unreadCnt: 3,
    status: 'available',
    unreadCnt: 3,
  },
];
let UserAddress = []; //사용자들 현재 채팅방 주소
let ALL_ws = []; //유저에 대한 user_idm, userid 값 저장


/**------------------------------
 * Socket IO
 * ------------------------------
 *
 */
io.on('connection', async (socket) => {
  // 접속자 아이디
  const userId = socket.handshake.query.userId;
  // const header = socket.handshake.headers;
  // const clientId = await computeUserIdFromHeaders(socket);
  // const clientId = await fetchUserId(socket);
  
  // 클라이언트의 IP 주소
  const clientIp = socket.handshake.address;
  // 클라이언트의 연결 시간
  const connectionTime = new Date().toLocaleString();

  console.log(`Client connected from IP: ${clientIp} at ${connectionTime}`);

  socket.on('mobile-request', async (blob_data ,blob_type, file_name, file_id, user_id, room_id, device_type, connect_id ) =>{
    if(device_type == 'm'){
      fileUploadS3(blob_data, file_name, blob_type).then(s3Upload => {
         console.log('s3Upload : ',s3Upload.Location)
        // io.to(room_id).emit('mobile-download', s3Upload.Location, blob_type, file_name, file_id, room_id ); 
        io.to(connect_id).emit('mobile-download', s3Upload.Location, blob_type, file_name, file_id, room_id ); 
      })
    } else {
      socket.to(connect_id).emit('client-download', blob_data, blob_type, file_name, user_id, file_id, room_id ); 
        
    }
  })

  // 연결 시도 이벤트 처리 
  socket.on('connection_error', (error) => {
    console.log(`Connection failed from IP: ${clientIp}`);
    console.error('Connection error:', error.message);
    console.log(err.req);      // 요청 객체
    console.log(err.code);     // 오류 코드(예: 1)
    console.log(err.message);  // 오류 메시지(예: "세션 ID를 알 수 없음")
    console.log(err.context);  // 추가 오류 컨텍스트
  });
  /**
   * [ON] 소켓연결시ßß
   * --
   */
  socket.on('disconnect', () => {
    console.log('user disconnected', moment().format('YYYY-MM-DD HH:mm:ss'));
  });

  /**
   * [ON] socket.on - login 로그인, 사용자목록 저장 및 전송
   * --
   */
  socket.on('login', (data) => {
    // console.log('user_id: ' + data.name + '/ userid: ' + data.userid);
    //데이터 존재여부 검사
    console.log('login 시 클라이언트에서 전송하는 값 : ',data)
    if (ALL_ws.filter((item) => item.user_id === data.user_id).length == 0) {
      ALL_ws.push({
        user_name: data.user_name,
        user_id: data.user_id,
        room_id: data.room_id,
      });
    }
    UserAddress = [
      ...UserAddress,
      {
        user_name: data.user_name,
        user_id: data.user_id,
        room_id: data.room_id,
      },
    ];
    console.log('data.room_id : ',data.room_id)
    console.log('ALL_ws : ',ALL_ws)
    io.to(data.room_id).emit('userList', ALL_ws);
  });

  /**
   * [ON] socket.on - RoomList 채팅방 리스트 전송
   * --
   */
  socket.on('RoomList', (userid, rName) => {
    // DB -
    models.room
      .findAll({
        include: [
          {
            model: models.invite,
            where: { user_id: userid, invite_access: 1 },
          },
        ],
      })
      .then((rooms) => {
        /* [Emit] Socket */
        socket.emit('RoomList', rooms);
      });
  });

  /**
   * [ON] socket.on - 채팅방 전환(leave)
   * --
   */
  socket.on('leaveRoom', (room_id, name) => {
    console.log('[ON] leaveRoom: ', room_id);
    socket.leave(room_id);
    socket.emit('leaveRoom', room_id, name);
  });

  /**
   * [ON] socket.on - 채팅방 전환(leave)
   * --
   */
  socket.on('leaveStorage', (connect_id) => {
    console.log('[ON] leaveStorage: ', connect_id);
    socket.leave(connect_id);
    socket.emit('leaveStorage', connect_id);
  });

  /**
   * [ON] socket.on - 채팅방 전환(join)
   * --
   */
  socket.on('joinRoom', (room_id, name) => {
    socket.join(room_id);
    io.to(room_id).emit('joinRoom', room_id, name);
  });

  /**
   * [ON] socket.on - 스토리지 전환(join)
   * --
   */
  socket.on('joinStorage', (connect_id, name) => {
    socket.join(connect_id);
    console.log('@@@@ connect_id : ',connect_id)
    io.to(connect_id).emit('joinStorage', connect_id, name);
  });

  /**
   * [ON] socket.on - 채팅방 생성
   * --
   */
  socket.on('creatRoom', (room_name, user_id) => {
    console.log('[ON] creatRoom: ', room_name);
    // let newRoom = 'Room' + (room.length + 1);
    room.push(room_name);
    myRoom = [...myRoom, { user_id: user_id, room_id: room_name }];
    // console.log(
    //   myRoom.filter((item) => item.user_id === user_id || item.user_id === 'Home')
    // );
    // console.log('room: ' + room);
    socket.emit(
      'creatRoom',
      myRoom.filter(
        (item) => item.user_id === user_id || item.user_id === 'Home'
      )
    );
  });

  /**
   * [ON] socket.on - 채팅방 초대
   * --
   */
  socket.on('inviteUser', (room_id, name) => {
    myRoom = [...myRoom, { user_id: name, room_id: room_id }];
    socket.emit('inviteUser', name);
    const roomAdd = UserAddress.filter((item) => item.user_id === name)[0]
      .room_id;
    io.to(roomAdd).emit(
      'RoomList',
      myRoom.filter((item) => item.user_id === name || item.user_id === 'Home')
    );
  });

  /**
   * [ON] socket.on - 채팅 메세지 전송
   * --
   */
  socket.on('chat', (room_id, name, msg) => {
    const nowDate = new Date(
      new Date().getTime() + 9 * 60 * 60 * 1000
    ); //September 20th 2023, 1:55:21 pm
    console.log('[chat] nowDate : '+nowDate)

    const newData = {
      chat_msg: msg,
      user_id: name,
      chat_date: nowDate,
      room_id,
    };

    // const msgData = new models.ChatMessage()
    // // var newStudent = new Student({name:'Hong Gil Dong', address:'서울시 강남구 논현동', age:'22'});
    // db.msgData.insertOne(newData)
    // // 9. 데이터 저장
    // // msgData.save(function(error, data){
    // //   if(error){
    // //       console.log(error);
    // //   }else{
    // //       console.log('chat message Data Saved! ')
    // //   }
    // // });
    models.chat.create(newData).then((re) => {
      console.log(`[chat] ${room_id} 번방 msg : ${JSON.stringify(re)}`);
      io.to(room_id).emit('chat', re);
    });
  });

  /**
   * [ON] socket.on - 파일 업로드 / FTP 동작 처리
   * --
   */
  // 기존 업로드 소켓 처리 코드
  // socket.on(
  //   'upload',
  //   async (
  //     file,
  //     file_name,
  //     file_size,
  //     file_exp,
  //     room_id,
  //     user_id,
  //     callback
  //   ) => {
  //     const roomInfo = await models.room.findOne({ where: { room_id } });
  //     const type = roomInfo.dataValues.room_ftptype;
  //     const {
  //       room_ftpip,
  //       room_ftpid,
  //       room_ftppw,
  //       room_ftppath,
  //       room_ftpport,
  //       room_ftptype,
  //     } = roomInfo.dataValues;
  //     if (
  //       !room_ftpip ||
  //       !room_ftpid ||
  //       !room_ftppw ||
  //       !room_ftppath ||
  //       !room_ftpport ||
  //       !room_ftptype
  //     ) {
  //       // 실패처리
  //       io.to(room_id).emit('uploadFailed', {});
  //       return false;
  //     }

  //     // console.log('roomInfo.dataValues: ', roomInfo.dataValues);
  //     // console.log(file); // <Buffer 25 50 44 ...>
  //     const ftpInfo = {
  //       host: roomInfo.dataValues.room_ftpip,
  //       path: roomInfo.dataValues.room_ftppath,
  //       username: roomInfo.dataValues.room_ftpid,
  //       password: roomInfo.dataValues.room_ftppw,
  //       port: roomInfo.dataValues.room_ftpport,
  //       type: roomInfo.dataValues.room_ftptype,
  //     };
  //     const chatData = {
  //       chat_msg: file_name,
  //       user_id: user_id,
  //       room_id,
  //     };
  //     const fileData = {
  //       originalname: file_name,
  //       file_name: file_name,
  //       file_saveId: randomUUID(),
  //       file_size: file_size,
  //       file_exp: file_exp,
  //       user_id: user_id,
  //       room_id: room_id,
  //       chat_id: 0,
  //       buffer: file,
  //     };

  //     //FIXME: 주석 해제 FTP 서비스
  //     /* FTP Call */
  //     // FTP서비스
  //     // const FTP = new FtpService();
  //     const FTP = Container.get(FtpService.default);
  //     let result;
  //     // FTP SAVE
  //     if (type === 'ftp') { // 채팅방의 타입
  //       result = await FTP.insertFile(ftpInfo, fileData);
  //     }
  //     // SFTP SAVE
  //     else if (type === 'sftp') {
  //       result = Gg(ftpInfo, fileData);
  //     }

  //     console.log('!!!!!! ftp타입 : ' + JSON.stringify(ftpInfo))

  //     // 실패 시
  //     if (type === 'ftp' && !result) {
  //       io.to(room_id).emit('uploadFailed', {});
  //     }

  //     console.log(123123123);
  //     models.chat.create(chatData).then((chatResult) => {
  //       fileData.chat_id = chatResult.dataValues.chat_id;
  //       //파일데이터 저장
  //       models.files.create(fileData).then((fileResult) => {
  //         const newData = {
  //           ...chatResult.dataValues,
  //           files: [fileResult.dataValues],
  //         };
  //         io.to(room_id).emit('chat', newData);
  //       });
  //     });
  //   } //
  // );

  /**
   * [ON] socket.on - 파일 업로드 / 다운로드 링크 전달
   * --
   */
  // socket.on(
  //   'upload',
  //   async (
  //     file,
  //     file_name,
  //     file_size,
  //     file_exp,
  //     room_id,
  //     user_id,
  //     callback
  //   ) => {
  //     console.log('file : ', file)
  //     console.log('file_size : ', file_size)
  //     console.log('file_exp : ', file_exp)
  //     file_name = decodeURIComponent(file_name)
  //     console.log('file_name : '+file_name);
  //     const roomInfo = await models.room.findOne({ where: { room_id } });
  //     const type = roomInfo.dataValues.room_ftptype;
  //     const {
  //       room_ftpip,
  //       room_ftpid,
  //       room_ftppw,
  //       room_ftppath,
  //       room_ftpport,
  //       room_ftptype,
  //     } = roomInfo.dataValues;
  //     if (
  //       !room_ftpip ||
  //       !room_ftpid ||
  //       !room_ftppw ||
  //       !room_ftppath ||
  //       !room_ftpport ||
  //       !room_ftptype
  //     ) {
  //       // 실패처리
  //       io.to(room_id).emit('uploadFailed', {});
  //       return false;
  //     }

  //     // console.log('roomInfo.dataValues: ', roomInfo.dataValues);
  //     // console.log(file); // <Buffer 25 50 44 ...>
  //     const ftpInfo = {
  //       host: roomInfo.dataValues.room_ftpip,
  //       path: roomInfo.dataValues.room_ftppath,
  //       username: roomInfo.dataValues.room_ftpid,
  //       password: roomInfo.dataValues.room_ftppw,
  //       port: roomInfo.dataValues.room_ftpport,
  //       type: roomInfo.dataValues.room_ftptype,
  //     };
  //     const chatData = {
  //       chat_msg: file_name,
  //       user_id: user_id,
  //       room_id,
  //     };
  //     const fileData = {
  //       originalname: file_name,
  //       file_name: file_name,
  //       file_saveId: randomUUID(),
  //       file_size: file_size,
  //       file_exp: file_exp,
  //       user_id: user_id,
  //       room_id: room_id,
  //       chat_id: 0,
  //       buffer: file,
  //     };

  //     const userList = [];
    
  //     let chatId;
  //     let fileId;
  //     // 데이터 저장
  //     models.chat.create(chatData).then((chatResult) => {
  //       fileData.chat_id = chatResult.dataValues.chat_id;
  //       //파일데이터 저장
  //       models.files.create(fileData).then((fileResult) => {
  //         const newData = {
  //           ...chatResult.dataValues,
  //           files: [fileResult.dataValues],
  //         };
  //         // fileData.chat_id 이 값으로 file_Id 값을 알아내서 id 값으로 파일 명 알아냄, 파일명도. 
  //         chatId = newData.chat_id
  //         fileId = newData.files[0].file_id

  //         const fileContent = file
  //         const tempDirectory = path.join(__dirname, '..', 'temp')
  //         const filePath = path.join(tempDirectory, fileId.toString())

  //         fs.writeFile(filePath, fileContent, { encoding : 'binary' }, (err) =>{
  //           if(err){socket.emit('fileUploadError','file save error')}
  //           else {
  //             fs.readFile(filePath, { encoding: 'binary' }, (err, fileBuffer) => {
  //               if(err){console.log('Error Read File :'+err)}
  //               else {
  //                   // 스토리지 디바이스 분기 처리 
  //                   storageDeviceFind(room_id).then((result)=> {
  //                     console.log('storageDeviceFind result : ',result)
  //                     if (result == 1){
  //                       console.log('확장프로그램')
  //                        const req = { 
  //                         protocol: 'http',
  //                         backendUrl: '3.34.90.66'
  //                       }
  //                       const downloadLink = `${req.protocol}://${req.backendUrl}:3333/api/v1/download/${fileId}`;
  //                       // 특정 디바이스에만 소켓 신호를 보내줘야함
  //                       io.to(room_id).emit('downloadLink', downloadLink,fileData)
  //                       // io.to('MwbOUicrX-LmZ_PNAAAJ').emit('downloadLink', downloadLink, newData, fileData)
  //                     } else if (!result){
  //                       console.log('모바일')
  //                       sendFileData(room_id, fileBuffer, fileData, fileId)
  //                     }
  //                   })
  //               }
  //             });
  //           }
  //         })
  //         // 링크 유저에게 소켓으로전달 -> 링크에 파일에 대한
  //         // const req = {
  //         //   protocol: 'http'
  //         // }
  //         // const downloadLink = `${req.protocol}:/localhost:3333/api/v1/download/${fileId}`;
  //         // io.to(room_id).emit('downloadLink', downloadLink, newData, fileData)
  //         io.to(room_id).emit('chat', newData);
  //       });
  //     });

  //   } //
  // );

  /**
   * [ON] socket.on - 파일 업로드 트리거 / blob 전송처리
   * --
   */
  socket.on('upload', async (blobForm, fileType, fileName, fileSize, room_id, user_id) => {
    fileName = decodeURIComponent(fileName)
    const nowDate = new Date(
      new Date().getTime() + 9 * 60 * 60 * 1000
    ); //September 20th 2023, 1:55:21 pm
    const chatData = {
      chat_msg: fileName,
      user_id: user_id,
      chat_date: nowDate,
      room_id,
    };
    let fileTypeSelect = fileTypeCheck(fileName, fileType)
    console.log('fileTypeSelect : ',fileTypeSelect)

    const fileData = {
      originalname: fileName,
      file_name: fileName,
      file_saveId: randomUUID(),
      file_size: fileSize,
      file_exp: fileTypeSelect,
      user_id: user_id,
      room_id: room_id,
      chat_id: 0,
    };
    const fileBlobData = {
      blob_data : blobForm,
      file_type: fileType,
      file_name : fileName
    }
    //  connect_id를 뽑아서 다운로드 트리거 실행되도록 
    const connectData = await models.connect.findOne({
      attributes: ['connect_id'],
      where: {
        room_id: room_id
      }
    });
    const connectId = connectData.dataValues.connect_id
    socket.join(connectId);
    
    storageDeviceFind(room_id).then(async (result)=> {
      console.log('storageDeviceFind result : ',result)
      if(result.device_status){ 
        models.chat.create(chatData).then((chatResult) => {
          fileData.chat_id = chatResult.dataValues.chat_id;
          
          models.files.create(fileData).then((fileResult) => {
            const newData = {
              ...chatResult.dataValues,
              files: [fileResult.dataValues],
            };

            if (result.device_type == 1){
              io.to(connectId).emit('download', blobForm, fileType, fileName, user_id, fileResult.file_id, room_id); // 연결된 채팅방에 대한 데이터일 때만 다운 받도록 처리해야함
            } else if (!result.device_type){
              uploadFileData(room_id, fileBlobData, fileResult.file_id, connectId)
            } else if (result.device_type == 100) {
              // 스토리지 디바이스가 연결되어 있지 않은 상태로 FTP 서버로 전송처리
              // room_id를 통해 해당 방의 ftp 서버 연결정보를 가져와서 처리 
            
            }

            io.to(room_id).emit('chat', newData); 
            socket.leave(connectId);
          });
        });
      } else {
        io.to(connectId).emit('upload-fail', blobForm, fileType, fileName, user_id, room_id); // 확장프로그램이 백그라운드상태
      }
    }) 
  })

   /**
   * [ON] socket.on -  파일 다운로드 트리거 / 파일업로드 요구
   * --
   */
  socket.on('download', async (file_id, room_id, user_id, device_type) => {
    console.log('download 트리거 호출 ! 요청한 유저의 디바이스 타입 ', device_type) // 
    //  connect_id를 뽑아서 다운로드 트리거 실행되도록 
    const connectData = await models.connect.findOne({
      attributes: ['connect_id'],
      where: {
        room_id: room_id
      }
    });
    const connectId = connectData.dataValues.connect_id
    socket.join(connectId);
    // 스토리지 디바이스에 파일 업로드 하라고 요청
    storageDeviceFind(room_id).then((result)=> {
      console.log('storageDeviceFind result : ',result)
      if (result.device_type == 1){
        console.log('[다운로드 트리거] 확장프로그램')
        // io.to(room_id).emit('upload', file_id, room_id, user_id, device_type);
        io.to(connectId).emit('upload', file_id, room_id, user_id, device_type);
      } else if (!result.device_type){
        console.log('[다운로드 트리거] 모바일 현재 상태 : ', result.device_status) 
        downloadFileData(room_id, file_id, user_id, device_type, connectId)
      } else if (result.device_type == 100) {
        // 스토리지 디바이스가 연결되어 있지 않은 상태로 FTP 서버로 전송처리
        // room_id를 통해 해당 방의 ftp 서버 연결정보를 가져와서 처리 
      }
    })
  })


  socket.on('server-download', async ( blob_data, blob_type, file_name, user_id, file_id, room_id, device_type) => {
    const connectData = await models.connect.findOne({
      attributes: ['connect_id'],
      where: {
        room_id: room_id
      }
    });
    const connectId = connectData.dataValues.connect_id

    if (device_type == 'm'){
      // 확장프로그램에서 받은 파일 데이터를 모바일 쪽으로 전달해줄 떄
      fileUploadS3(blob_data, file_name, blob_type).then(s3Upload => {
        console.log('s3Upload.Location : ',s3Upload.Location)
        // io.to(room_id).emit('mobile-download', s3Upload.Location, blob_type, file_name, file_id, room_id ); 
        io.to(connectId).emit('mobile-download', s3Upload.Location, blob_type, file_name, file_id, room_id ); 
      })
    } else {
      // 확장프로그램에서 받은 파일 데이터를 웹 쪽으로 전달해줄 때
      console.log('웹 페이지로 전송 !! ', connectId)
      // io.to(room_id).emit('client-download', blob_data, blob_type, file_name, user_id, file_id, room_id, connectId); 
      io.to(connectId).emit('client-download', blob_data, blob_type, file_name, user_id, file_id, room_id, connectId); 
    }
  })
});



function fileUpload () {

}

/**
 * SFTP로 파일전송
 * --
 */
function Gg(getFileInfo, file) {
  let client = new SftpClient();

  // FTP 연결 정보
  const connectInfo = {
    host: getFileInfo.host,
    username: getFileInfo.username,
    password: getFileInfo.password,
    port: getFileInfo.port ? getFileInfo.port : 20022,
    path: getFileInfo.path,
  };

  console.log('connectInfo: ', connectInfo);
  console.log('getFileInfo: ', getFileInfo);

  client
    .connect(connectInfo)
    .then(async () => {
      const randomId = `${randomUUID()}`;
      console.log('연결정보 : ' + JSON.stringify(connectInfo))
      const saveFilePath = join(__dirname, '..', 'temp', randomId);
      // 파일 생성
      await fs.promises.writeFile(saveFilePath, file.buffer);
      // let path;
      // if (path != '') {f
      //   remotePath = `/${path}`;
      // }
      let remotePath = connectInfo.path;
      console.log('remotePath: ', remotePath);

      remotePath = `${remotePath}/${randomId}`;

      // fileObject = await this.client.list(remotePath, )
      // try{
      //   result = await client.fastPut(saveFilePath, remotePath);
      // } catch(err){
      //     console.log("file upload fail : "+ err);
      // }
      result = await client.fastPut(saveFilePath, remotePath);
      console.log('result: ', result);
      // // 파일 삭제
      await fs.promises.unlink(saveFilePath);

      client.end().then(() => {
        console.log('end: ');
        return true;
      });
    })
    .catch((err) => {
      console.log('err 발생 : ' + err)
      return false;
    });
}

/**
 * FTP로 파일전송
 * --
 */
async function goToFtp(uploadInfo, file) {
  try {
    let client = new Client();
    const path = uploadInfo.path;

    console.log('uploadInfo: ', uploadInfo);

    // FTP 접속
    await client.access({
      host: uploadInfo.host,
      user: uploadInfo.username,
      password: uploadInfo.password,
      port: uploadInfo.port ? uploadInfo.port : 21,
    });

    // 경로가 있을 경우 해당경로로 이동
    if (path != '') {
      await client.cd(`/${path}`);
    }

    const randomId = `${randomUUID()}.png`;

    console.log('randomId: ', randomId);

    // 경로에서 파일 및 폴더 목록 가져오기
    // const saveFilePath = join(__dirname, '../../..', 'temp', randomId);

    // // 파일 생성
    // await fs.promises.writeFile(saveFilePath, file.buffer);
    // console.log(file.originalname);
    // // 경로에서 파일 및 폴더 목록 가져오기
    // console.log(saveFilePath);
    // result = await client.uploadFrom(saveFilePath, file.originalname);
    // // // 파일 삭제
    // await fs.promises.unlink(saveFilePath);
    // // FTP 연결 종료
    client.close();

    // await client.end();

    return result;
  } catch (err) {
    console.log('[goToFtp] Error: ', err);
    return false;
  }
}

/**
 * 스토리지 디바이스 타입 조회
 * --
 */ 
async function storageDeviceFind(roomId) {
  const deviceData = await models.connect.findOne({
    attributes: ['device_id'],
    where: {
      room_id: roomId
    }
  });
  // deviceData 데이터가 null 일 때 처리 필요
  if (deviceData === null) {
    // room을 개설한 주인에게 전달 
    return 100
  }
  const deviceType = await models.device.findOne({
    where: {
      device_id: deviceData.device_id
    }
  })
  console.log('device status : ',deviceType.device_status)

  if (deviceType === null) {
    return { device_type: null, device_status: null }; // deviceType이 null일 때 처리
  }

  return { device_type: deviceType.device_type, device_status: deviceType.device_status }; // device_type 및 device_status를 반환
}


/**
 * [모바일] 업로드 트리거 - 파일 다운로드 링크 전송 (레거시 코드)
 * --
 */
async function sendFileData(roomId, fileBuffer, fileData, fileId) {
  const expo = new Expo();
  const roomData = await models.room.findOne({
    where: {
      room_id : roomId
    } 
  })

  const result = await models.connect.findAll({
    where: {
      room_id: roomId
    }
  })

  const expoTokenList =[] 
  for (const value of result) {
    let deviceDate = await models.device.findOne({
      where: {
        device_id : value.device_id
      }
    })
    expoTokenList.push(deviceDate.device_token)
  }

  const downloadLink = `http://localhost:3333/api/v1/download/${fileId}`;
  const messages = [];
  // 여러 토큰으로 푸시 알림 전송 처리 하기 
  for (const token of expoTokenList) {
    // Expo 메시지 형식에 맞게 메시지를 구성
    messages.push({
      to: token,
      sound: 'default',
      title: 'fChat 파일 업로드',
      body: `[${roomData.room_name}] 채팅방에 파일이 업로드 되었습니다.`,
      data: {
        originalname: fileData.originalname, 
        file_name: fileData.file_name, 
        file_saveId: fileData.file_saveId, 
        file_size: fileData.file_size, 
        file_exp: fileData.file_exp, 
        user_id: fileData.user_id, 
        room_id: fileData.room_id, 
        chat_id: fileData.chat_id, 
        url : downloadLink,
      },
    });
  }

  // Expo 푸시 알림 전송
  const chunks = expo.chunkPushNotifications(messages);

  (async () => {
    for (const chunk of chunks) {
      try {
        const receipts = await expo.sendPushNotificationsAsync(chunk);
        console.log('receipts : '+receipts);
      } catch (error) {
        console.error('error : '+error);
        // 에러처리 필요 
      }
    }
  })();
}


/**
 * [모바일] 업로드 트리거 - 파일 blob 데이터 전송 
 * --
 */
async function uploadFileData(roomId, fileInfo, fileId, connectId) {
  const expo = new Expo();
  const roomData = await models.room.findOne({
    where: {
      room_id : roomId
    } 
  })

  const result = await models.connect.findAll({
    where: {
      room_id: roomId
    }
  })

  const expoTokenList =[] 
  for (const value of result) {
    let deviceDate = await models.device.findOne({
      where: {
        device_id : value.device_id
      }
    })
    expoTokenList.push(deviceDate.device_token)
  }


  // [zliv] 대용량 버퍼 데이터 압축
  // const compressedData = await zlivBuffer(fileInfo.blob_data)

  // ArrayBuffer에서 Buffer로 변환 -> base64 형태로 변환
  const buffer = Buffer.from(fileInfo.blob_data,' utf-8');
  const base64Data = buffer.toString('base64');

  let fileType = fileTypeCheck(fileInfo.file_name, fileInfo.file_type)
  console.log('fileType : ',fileType)

  // 파일 s3에 업로드 해주는 처리 추가 
  const s3Upload = await fileUploadS3(fileInfo.blob_data, fileInfo.file_name, fileType)
  console.log('s3Upload : ',s3Upload)

  const messages = [];
  for (const token of expoTokenList) {
    // Expo 메시지 형식에 맞게 메시지를 구성
    messages.push({
      to: token,
      sound: 'default',
      title: 'fChat 파일 업로드 요청',
      body: `[${roomData.room_name}] 채팅방에 파일 업로드 요청이 왔습니다.`,
      data: {
        downloadLink: s3Upload.Location,
        file_type: fileType,
        file_name : fileInfo.file_name,
        file_id: fileId,
        room_id: roomId,
        connect_id: connectId
      },
    });
  }


    // Expo 푸시 알림 전송
  const chunks = expo.chunkPushNotifications(messages);

  (async () => {
    for (const chunk of chunks) {
      try {
        const receipts = await expo.sendPushNotificationsAsync(chunk);
        console.log('receipts : '+receipts);
      } catch (error) {
        console.error('error : '+error);
        // 에러처리 필요 
      }
    }
  })();

}


/**
 * [모바일] 다운로드 트리거 -  파일 다운로드 요청하기
 * --
 */
async function downloadFileData(roomId, fileId, reqUserId,device_type, connectId) {
  const expo = new Expo();
  const roomData = await models.room.findOne({
    where: {
      room_id : roomId
    } 
  })

  const result = await models.connect.findAll({
    where: {
      room_id: roomId
    }
  })

  const fileData = await models.files.findOne({
    where: {
      file_id : fileId
    } 
  })

  const expoTokenList =[] 
  for (const value of result) { 
    let deviceDate = await models.device.findOne({
      where: {
        device_id : value.device_id
      }
    })
    expoTokenList.push(deviceDate.device_token)
  }

  const messages = [];
  // 여러 토큰으로 푸시 알림 전송 처리 하기 
  for (const token of expoTokenList) {
    // Expo 메시지 형식에 맞게 메시지를 구성
    messages.push({
      to: token,
      sound: 'default',
      title: 'fChat 파일 다운로드 요청',
      body: `[${roomData.room_name}] 채팅방에 파일 다운로드 요청이 왔습니다.`,
      data: {
        // 파일 타입 저장 -> DB 저장할 떄 한글파일이면은 파일 타입 지정해서 저장할 수 있도록 하기 
        file_id: fileId,
        req_user_id: reqUserId,
        room_id: roomId,
        device_type: device_type,
        file_type: fileData.file_exp,
        connect_id: connectId
      },
    });
  }

  // Expo 푸시 알림 전송
  const chunks = expo.chunkPushNotifications(messages);

  (async () => {
    for (const chunk of chunks) {
      try {
        const receipts = await expo.sendPushNotificationsAsync(chunk);
        console.log('receipts : '+receipts);
      } catch (error) {
        console.error('error : '+error);
        // 에러처리 필요 
      }
    }
  })();

}


async function zlivBuffer(blob_data) {
  return new Promise((resolve, reject) => {
    zlib.gzip(blob_data, (err, buffer) => {
      if (err) {
        console.error('Error compressing data', err);
        reject(err);
        return;
      }
      console.log('zlivBuffer : ', buffer.toString('base64'))
      resolve(buffer.toString('base64'));
    });
  });
}

/**
 * S3 파일 업로드
 * --
 */
async function fileUploadS3 (fileData, fileName, fileType) {
  const s3 = new AWS.S3({
    accessKeyId: 'AKIA5HNREAFSLL23GURI',
    secretAccessKey: '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',
    region: 'ap-northeast-2',
  });
  
  // fileData 데이터를 파일 형태로 변환해야함.
  const bufferData = Buffer.from(fileData, 'base64');
  const fileKey = `mobile/${fileName}`

  const params = {
    Bucket: 'fchat.storage',
    Key: fileKey, 
    Body: bufferData,
    ContentType : fileType
  }

  try {
    const data = await s3.upload(params).promise();
    console.log('result data : ', data)
    return data;
  }catch(err){
    console.log('s3 upload err : ', err);
    throw err; 
  }
}

/**
 * 파일 타입 검사 (한글파일 업로드 시 파일의 mime 타입 데이터 저장안되는 이슈 처리용)
 * --
 */
function fileTypeCheck(fileName, fileType) {

  if (fileType == '') {
    // 파일 확장자 검사
    const extension = fileName.split('.').pop(); // 확장자 추출
    switch (extension) {
      case 'hwp':
        fileType = 'application/vnd.hancom.hwp'
        break;
      case 'hwt':
        fileType = 'application/vnd.hancom.hwt'
        break;
      case 'hml':
        fileType = 'application/vnd.hancom.hml'
        break;
      case 'hwpx':
        fileType = 'application/vnd.hancom.hwpx'
        break;
      case 'dmg':
        fileType = 'application/octet-stream'
        break;
      default:
        console.log(`파일 타입 체크 안되는 확장자 : .${extension}`);
        break;
    }
  }

  return fileType
}

module.exports = io;